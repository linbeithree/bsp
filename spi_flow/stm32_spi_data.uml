@startuml
== Data Flow ==

autonumber "<b>[00]"
device -> API :  cyg_spi_cortexm_stm32_device_t
note right #AAFFFF
	cyg_spi_cortexm_stm32_device_t {
		// Upper layer data
		cyg_spi_device spi_device; // Upper layer SPI device data.

		// Device setup (user configurable) 
		cyg_uint8 dev_num;     // Device number.
		cyg_uint8 bus_16bit;   // Use 16 bit (1) or 8 bit (0) transfers.
		cyg_uint8 cl_pol;      // Clock polarity (0 or 1).
		cyg_uint8 cl_pha;      // Clock phase    (0 or 1).
		cyg_uint32 cl_brate;   // Clock baud rate.
		cyg_uint16 cs_up_udly; // Minimum delay in us between CS up and transfer start.
		cyg_uint16 cs_dw_udly; // Minimum delay in us between transfer end and CS down.
		cyg_uint16 tr_bt_udly; // Minimum delay in us between two transfers.

		// Device state (private) 
		cyg_uint32 spi_cr1_val; // SPI configuration register (initialised to 0).
	};
end note

API -> "driver" :  cyg_spi_cortexm_stm32_bus_t
note right #AAFFFF
	cyg_spi_cortexm_stm32_bus_t {
		//  Upper layer data 
		cyg_spi_bus       spi_bus;         // Upper layer SPI bus data.

		//  Bus configuration constants 
		const cyg_spi_cortexm_stm32_bus_setup_t* setup;

		//  Driver state (private) 
		cyg_interrupt     tx_intr_data;    // DMA interrupt data (TX).
		cyg_interrupt     rx_intr_data;    // DMA interrupt data (RX).
		cyg_handle_t      tx_intr_handle;  // DMA interrupt handle (TX).
		cyg_handle_t      rx_intr_handle;  // DMA interrupt handle (RX).
		cyg_drv_mutex_t   mutex;           // Transfer mutex.
		cyg_drv_cond_t    condvar;         // Transfer condition variable.
		cyg_bool          tx_dma_done;     // Flags used to signal completion.
		cyg_bool          rx_dma_done;     // Flags used to signal completion.
		cyg_bool          cs_up;           // Chip select asserted flag.
	};

	cyg_spi_cortexm_stm32_bus_setup_t {
		cyg_uint32 apb_freq;            // Peripheral bus frequency (fp).
		cyg_haladdress spi_reg_base;    // Base address of SPI register block.
		cyg_haladdress dma_reg_base;    // Base address of DMA register block.
		cyg_uint8 dma_tx_channel;       // TX DMA channel for this bus.
		cyg_uint8 dma_rx_channel;       // RX DMA channel for this bus.
		cyg_uint8 cs_gpio_num;          // Number of chip selects for this bus.
		const cyg_uint8 *cs_gpio_list;  // List of GPIOs used as chip selects.
		const cyg_uint8 *spi_gpio_list; // List of GPIOs used by the SPI interface.
		cyg_vector_t dma_tx_intr;       // Interrupt used for DMA transmit.
		cyg_vector_t dma_rx_intr;       // Interrupt used for DMA receive.
		cyg_priority_t dma_tx_intr_pri; // Interrupt priority for DMA transmit.
		cyg_priority_t dma_rx_intr_pri; // Interrupt priority for DMA receive.
		cyg_uint32 bbuf_size;           // Size of bounce buffers.
		cyg_uint8 *bbuf_tx;             // Pointer to transmit bounce buffer.
		cyg_uint8 *bbuf_rx;             // Pointer to receive bounce buffer.
	};
end note

"driver" -> "I/O" :  cyg_spi_bus
note right #AAFFFF
	cyg_spi_bus
	{
		cyg_drv_mutex_t spi_lock;
		#ifdef CYGDBG_USE_ASSERTS
		cyg_spi_device *spi_current_device;
		#endif
		void (*spi_transaction_begin)(cyg_spi_device *);
		void (*spi_transaction_transfer)(cyg_spi_device *, cyg_bool, cyg_uint32, const cyg_uint8 *, cyg_uint8 *, cyg_bool);
		void (*spi_transaction_tick)(cyg_spi_device *, cyg_bool, cyg_uint32);
		void (*spi_transaction_end)(cyg_spi_device *);
		int (*spi_get_config)(cyg_spi_device *, cyg_uint32, void *, cyg_uint32 *);
		int (*spi_set_config)(cyg_spi_device *, cyg_uint32, const void *, cyg_uint32 *);
	} cyg_spi_bus;
end note

@enduml